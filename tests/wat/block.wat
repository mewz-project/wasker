(module

  ;; Import our myprint function
  (import "myenv" "print" (func $print (param i64 i32)))

  ;; Define a single page memory of 64KB.
  (memory $0 1)

  ;; Store the Hello World (null terminated) string at byte offset 0
  (data (i32.const 20) "Test Passed\n")
  (data (i32.const 36) "#Test Failed\n")

  ;; Debug function
  (func $printd (param $len i32)
    i64.const 0
    (local.get $len)
    (call $print)
  )

  (func $printSuccess
    i64.const 20
    i32.const 12
    (call $print)
  )

  (func $printFail
    i64.const 36
    i32.const 13
    (call $print)
  )

  (func $assert_test_i32 (param $expected i32) (param $result i32)
    local.get $expected
    local.get $result
    i32.eq
    (if
      (then
        (call $printSuccess)
      )
      (else
        (call $printFail)
      )
    )
  )

  (func $assert_test_i64 (param $expected i64) (param $result i64)
    local.get $expected
    local.get $result
    i64.eq
    (if
      (then
        (call $printSuccess)
      )
      (else
        (call $printFail)
      )
    )
  )

  (func $dummy)

  (func $singular (result i32)
    (block (nop))
    (block (result i32) (i32.const 7))
  )

  ;; (func $multi (result i32)
  ;;   (block (call $dummy) (call $dummy) (call $dummy) (call $dummy))
  ;;   (block (result i32)
  ;;     (call $dummy) (call $dummy) (call $dummy) (i32.const 7) (call $dummy)
  ;;   )
  ;;   (drop)
  ;;   (block (result i32 i64 i32)
  ;;     (call $dummy) (call $dummy) (call $dummy) (i32.const 8) (call $dummy)
  ;;     (call $dummy) (call $dummy) (call $dummy) (i64.const 7) (call $dummy)
  ;;     (call $dummy) (call $dummy) (call $dummy) (i32.const 9) (call $dummy)
  ;;   )
  ;;   (drop) (drop)
  ;; )

  (func $nested (result i32)
    (block (result i32)
      (block (call $dummy) (block) (nop))
      (block (result i32) (call $dummy) (i32.const 9))
    )
  )

  (func $deep (result i32)
    (block (result i32) (block (result i32)
      (block (result i32) (block (result i32)
        (block (result i32) (block (result i32)
          (block (result i32) (block (result i32)
            (block (result i32) (block (result i32)
              (block (result i32) (block (result i32)
                (block (result i32) (block (result i32)
                  (block (result i32) (block (result i32)
                    (block (result i32) (block (result i32)
                      (block (result i32) (block (result i32)
                        (block (result i32) (block (result i32)
                          (block (result i32) (block (result i32)
                            (block (result i32) (block (result i32)
                              (block (result i32) (block (result i32)
                                (block (result i32) (block (result i32)
                                  (block (result i32) (block (result i32)
                                    (block (result i32) (block (result i32)
                                      (block (result i32) (block (result i32)
                                        (block (result i32) (block (result i32)
                                          (call $dummy) (i32.const 150)
                                        ))
                                      ))
                                    ))
                                  ))
                                ))
                              ))
                            ))
                          ))
                        ))
                      ))
                    ))
                  ))
                ))
              ))
            ))
          ))
        ))
      ))
    ))
  )

  (func $as-select-first (result i32)
    (select (block (result i32) (i32.const 1)) (i32.const 2) (i32.const 3))
  )
  (func $as-select-mid (result i32)
    (select (i32.const 2) (block (result i32) (i32.const 1)) (i32.const 3))
  )
  (func $as-select-last (result i32)
    (select (i32.const 2) (i32.const 3) (block (result i32) (i32.const 1)))
  )

  (func $as-loop-first (result i32)
    (loop (result i32) (block (result i32) (i32.const 1)) (call $dummy) (call $dummy))
  )
  (func $as-loop-mid (result i32)
    (loop (result i32) (call $dummy) (block (result i32) (i32.const 1)) (call $dummy))
  )
  (func $as-loop-last (result i32)
    (loop (result i32) (call $dummy) (call $dummy) (block (result i32) (i32.const 1)))
  )
  (func $as-if-then (result i32)
    (if (result i32) (i32.const 1) (then (block (result i32) (i32.const 1))) (else (i32.const 2)))
  )
  (func $as-if-else (result i32)
    (if (result i32) (i32.const 1) (then (i32.const 2)) (else (block (result i32) (i32.const 1))))
  )

  (func $as-br_if-first (result i32)
    (block (result i32) (br_if 0 (block (result i32) (i32.const 1)) (i32.const 2)))
  )
  (func $as-br_if-last (result i32)
    (block (result i32) (br_if 0 (i32.const 2) (block (result i32) (i32.const 1))))
  )

  (func $as-br_table-first (result i32)
    (block (result i32) (block (result i32) (i32.const 1)) (i32.const 2) (br_table 0 0))
  )
  (func $as-br_table-last (result i32)
    (block (result i32) (i32.const 2) (block (result i32) (i32.const 1)) (br_table 0 0))
  )

  (func $func (param i32 i32) (result i32) (local.get 0))
  (type $check (func (param i32 i32) (result i32)))
  (table funcref (elem $func))

  (func $as-call_indirect-first (result i32)
    (block (result i32)
      (call_indirect (type $check)
        (block (result i32) (i32.const 1)) (i32.const 2) (i32.const 0)
      )
    )
  )
  (func $as-call_indirect-mid (result i32)
    (block (result i32)
      (call_indirect (type $check)
        (i32.const 2) (block (result i32) (i32.const 1)) (i32.const 0)
      )
    )
  )
  (func $as-call_indirect-last (result i32)
    (block (result i32)
      (call_indirect (type $check)
        (i32.const 1) (i32.const 2) (block (result i32) (i32.const 0))
      )
    )
  )

  (func $as-store-first
    (block (result i32) (i32.const 1)) (i32.const 1) (i32.store)
  )
  (func $as-store-last
    (i32.const 10) (block (result i32) (i32.const 1)) (i32.store)
  )

  (func $as-memory.grow-value (result i32)
    (memory.grow (block (result i32) (i32.const 1)))
  )

  (func $f (param i32) (result i32) (local.get 0))

  (func $as-call-value (result i32)
    (call $f (block (result i32) (i32.const 1)))
  )
  (func $as-return-value (result i32)
    (block (result i32) (i32.const 1)) (return)
  )
  (func $as-br-value (result i32)
    (block (result i32) (br 0 (block (result i32) (i32.const 1))))
  )
  (func $as-local.set-value (result i32)
    (local i32) (local.set 0 (block (result i32) (i32.const 1))) (local.get 0)
  )
  (func $as-local.tee-value (result i32)
    (local i32) (local.tee 0 (block (result i32) (i32.const 1)))
  )
  (global $a (mut i32) (i32.const 10))
  (func $as-global.set-value (result i32)
    (global.set $a (block (result i32) (i32.const 1)))
    (global.get $a)
  )

  (func $as-load-operand (result i32)
    (i32.load (block (result i32) (i32.const 1)))
  )

  (func $as-unary-operand (result i32)
    (i32.ctz (block (result i32) (call $dummy) (i32.const 13)))
  )
  (func $as-binary-operand (result i32)
    (i32.mul
      (block (result i32) (call $dummy) (i32.const 3))
      (block (result i32) (call $dummy) (i32.const 4))
    )
  )
  (func $as-test-operand (result i32)
    (i32.eqz (block (result i32) (call $dummy) (i32.const 13)))
  )
  (func $as-compare-operand (result i32)
    (f32.gt
      (block (result f32) (call $dummy) (f32.const 3))
      (block (result f32) (call $dummy) (f32.const 3))
    )
  )
  ;; Skip because multiple return values are not supported
  ;; (func $as-binary-operands (result i32)
  ;;   (i32.mul
  ;;     (block (result i32 i32)
  ;;       (call $dummy) (i32.const 3) (call $dummy) (i32.const 4)
  ;;     )
  ;;   )
  ;; )
  ;; (func $as-compare-operands (result i32)
  ;;   (f32.gt
  ;;     (block (result f32 f32)
  ;;       (call $dummy) (f32.const 3) (call $dummy) (f32.const 3)
  ;;     )
  ;;   )
  ;; )
  ;; (func $as-mixed-operands (result i32)
  ;;   (block (result i32 i32)
  ;;     (call $dummy) (i32.const 3) (call $dummy) (i32.const 4)
  ;;   )
  ;;   (i32.const 5)
  ;;   (i32.add)
  ;;   (i32.mul)
  ;; )

  (func $break-bare (result i32)
    (block (br 0) (unreachable))
    (block (br_if 0 (i32.const 1)) (unreachable))
    (block (br_table 0 (i32.const 0)) (unreachable))
    (block (br_table 0 0 0 (i32.const 1)) (unreachable))
    (i32.const 19)
  )
  (func $break-value (result i32)
    (block (result i32) (br 0 (i32.const 18)) (i32.const 19))
  )
  ;; (func $break-multi-value (result i32 i32 i64)
  ;;   (block (result i32 i32 i64)
  ;;     (br 0 (i32.const 18) (i32.const -18) (i64.const 18))
  ;;     (i32.const 19) (i32.const -19) (i64.const 19)
  ;;   )
  ;; )
  (func $break-repeated (result i32)
    (block (result i32)
      (br 0 (i32.const 18))
      (br 0 (i32.const 19))
      (drop (br_if 0 (i32.const 20) (i32.const 0)))
      (drop (br_if 0 (i32.const 20) (i32.const 1)))
      (br 0 (i32.const 21))
      (br_table 0 (i32.const 22) (i32.const 4))
      (br_table 0 0 0 (i32.const 23) (i32.const 1))
      (i32.const 21)
    )
  )
  (func $break-inner (result i32)
    (local i32)
    (local.set 0 (i32.const 0))
    (local.set 0 (i32.add (local.get 0) (block (result i32) (block (result i32) (br 1 (i32.const 0x1))))))
    (local.set 0 (i32.add (local.get 0) (block (result i32) (block (br 0)) (i32.const 0x2))))
    (local.set 0
      (i32.add (local.get 0) (block (result i32) (i32.ctz (br 0 (i32.const 0x4)))))
    )
    (local.set 0
      (i32.add (local.get 0) (block (result i32) (i32.ctz (block (result i32) (br 1 (i32.const 0x8))))))
    )
    (local.get 0)
  )

  ;; Skip because block with parameters is not supported
  ;; (func $param (result i32)
  ;;   (i32.const 1)
  ;;   (block (param i32) (result i32)
  ;;     (i32.const 2)
  ;;     (i32.add)
  ;;   )
  ;; )
  ;; (func $params (result i32)
  ;;   (i32.const 1)
  ;;   (i32.const 2)
  ;;   (block (param i32 i32) (result i32)
  ;;     (i32.add)
  ;;   )
  ;; )
  ;; (func $params-id (result i32)
  ;;   (i32.const 1)
  ;;   (i32.const 2)
  ;;   (block (param i32 i32) (result i32 i32))
  ;;   (i32.add)
  ;; )
  ;; (func $param-break (result i32)
  ;;   (i32.const 1)
  ;;   (block (param i32) (result i32)
  ;;     (i32.const 2)
  ;;     (i32.add)
  ;;     (br 0)
  ;;   )
  ;; )
  ;; (func $params-break (result i32)
  ;;   (i32.const 1)
  ;;   (i32.const 2)
  ;;   (block (param i32 i32) (result i32)
  ;;     (i32.add)
  ;;     (br 0)
  ;;   )
  ;; )
  ;; (func $params-id-break (result i32)
  ;;   (i32.const 1)
  ;;   (i32.const 2)
  ;;   (block (param i32 i32) (result i32 i32) (br 0))
  ;;   (i32.add)
  ;; )
  
  (func $effects (result i32)
    (local i32)
    (block
      (local.set 0 (i32.const 1))
      (local.set 0 (i32.mul (local.get 0) (i32.const 3)))
      (local.set 0 (i32.sub (local.get 0) (i32.const 5)))
      (local.set 0 (i32.mul (local.get 0) (i32.const 7)))
      (br 0)
      (local.set 0 (i32.mul (local.get 0) (i32.const 100)))
    )
    (i32.eq (local.get 0) (i32.const -14))
  )
  
  (func (export "_start")
    (call $assert_test_i32 (call $singular) (i32.const 7))
    ;; Skip because multiple return values are not supported
    ;; (call $assert_test_i32 (call $multi) (i32.const 8))
    (call $assert_test_i32 (call $nested) (i32.const 9))
    (call $assert_test_i32 (call $deep) (i32.const 150))

    (call $assert_test_i32 (call $as-select-first) (i32.const 1))
    (call $assert_test_i32 (call $as-select-mid) (i32.const 2))
    (call $assert_test_i32 (call $as-select-last) (i32.const 2))

    (call $assert_test_i32 (call $as-loop-first) (i32.const 1))
    (call $assert_test_i32 (call $as-loop-mid) (i32.const 1))
    (call $assert_test_i32 (call $as-loop-last) (i32.const 1))

    (call $assert_test_i32 (call $as-if-then) (i32.const 1))
    (call $assert_test_i32 (call $as-if-else) (i32.const 2))

    (call $assert_test_i32 (call $as-br_if-first) (i32.const 1))
    (call $assert_test_i32 (call $as-br_if-last) (i32.const 2))

    (call $assert_test_i32 (call $as-br_table-first) (i32.const 1))
    (call $assert_test_i32 (call $as-br_table-last) (i32.const 2))

    (call $assert_test_i32 (call $as-call_indirect-first) (i32.const 1))
    (call $assert_test_i32 (call $as-call_indirect-mid) (i32.const 2))
    (call $assert_test_i32 (call $as-call_indirect-last) (i32.const 1))
    (call $as-store-first)
    (call $as-store-last)
    (call $assert_test_i32 (call $as-memory.grow-value) (i32.const 1))
    (call $assert_test_i32 (call $as-call-value) (i32.const 1))
    (call $assert_test_i32 (call $as-return-value) (i32.const 1))
    (call $assert_test_i32 (call $as-br-value) (i32.const 1))
    (call $assert_test_i32 (call $as-local.set-value) (i32.const 1))
    (call $assert_test_i32 (call $as-local.tee-value) (i32.const 1))
    (call $assert_test_i32 (call $as-global.set-value) (i32.const 1))
    (call $assert_test_i32 (call $as-load-operand) (i32.const 1))

    (call $assert_test_i32 (call $as-unary-operand) (i32.const 0))
    (call $assert_test_i32 (call $as-binary-operand) (i32.const 12))
    (call $assert_test_i32 (call $as-test-operand) (i32.const 0))
    (call $assert_test_i32 (call $as-compare-operand) (i32.const 0))

    ;; Skip because multiple return values are not supported
    ;; (call $assert_test_i32 (call $as-binary-operands) (i32.const 12))
    ;; (call $assert_test_i32 (call $as-compare-operands) (i32.const 0))
    ;; (call $assert_test_i32 (call $as-mixed-operands) (i32.const 27))

    (call $assert_test_i32 (call $break-bare) (i32.const 19))
    (call $assert_test_i32 (call $break-value) (i32.const 18))

    ;; Skip because multiple return values are not supported
    ;; (call $assert_test_i32 (call $break-multi-value)
    ;;   (i32.const 18) (i32.const -18) (i64.const 18)
    ;; )

    (call $assert_test_i32 (call $break-repeated) (i32.const 18))
    (call $assert_test_i32 (call $break-inner) (i32.const 0xf))
    
    ;; Skip because block with parameters is not supported
    ;; (call $assert_test_i32 (call $param) (i32.const 3))
    ;; (call $assert_test_i32 (call $params) (i32.const 3))
    ;; (call $assert_test_i32 (call $params-id) (i32.const 3))
    ;; (call $assert_test_i32 (call $param-break) (i32.const 3))
    ;; (call $assert_test_i32 (call $params-break) (i32.const 3))
    ;; (call $assert_test_i32 (call $params-id-break) (i32.const 3))
    (call $assert_test_i32 (call $effects) (i32.const 1))
  )
)